// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: book.proto

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookV1Client is the client API for BookV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookV1Client interface {
	Create(ctx context.Context, in *CreateRequestBook, opts ...grpc.CallOption) (*CreateResponseBook, error)
	Get(ctx context.Context, in *GetRequestBook, opts ...grpc.CallOption) (*GetResponseBook, error)
	UpdatePrice(ctx context.Context, in *UpdatePriceRequestBook, opts ...grpc.CallOption) (*UpdatePriceResponseBook, error)
	UpdateAmount(ctx context.Context, in *UpdateAmountRequestBook, opts ...grpc.CallOption) (*UpdateAmountResponseBook, error)
}

type bookV1Client struct {
	cc grpc.ClientConnInterface
}

func NewBookV1Client(cc grpc.ClientConnInterface) BookV1Client {
	return &bookV1Client{cc}
}

func (c *bookV1Client) Create(ctx context.Context, in *CreateRequestBook, opts ...grpc.CallOption) (*CreateResponseBook, error) {
	out := new(CreateResponseBook)
	err := c.cc.Invoke(ctx, "/api.book_store.v1.BookV1/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookV1Client) Get(ctx context.Context, in *GetRequestBook, opts ...grpc.CallOption) (*GetResponseBook, error) {
	out := new(GetResponseBook)
	err := c.cc.Invoke(ctx, "/api.book_store.v1.BookV1/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookV1Client) UpdatePrice(ctx context.Context, in *UpdatePriceRequestBook, opts ...grpc.CallOption) (*UpdatePriceResponseBook, error) {
	out := new(UpdatePriceResponseBook)
	err := c.cc.Invoke(ctx, "/api.book_store.v1.BookV1/UpdatePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookV1Client) UpdateAmount(ctx context.Context, in *UpdateAmountRequestBook, opts ...grpc.CallOption) (*UpdateAmountResponseBook, error) {
	out := new(UpdateAmountResponseBook)
	err := c.cc.Invoke(ctx, "/api.book_store.v1.BookV1/UpdateAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookV1Server is the server API for BookV1 service.
// All implementations must embed UnimplementedBookV1Server
// for forward compatibility
type BookV1Server interface {
	Create(context.Context, *CreateRequestBook) (*CreateResponseBook, error)
	Get(context.Context, *GetRequestBook) (*GetResponseBook, error)
	UpdatePrice(context.Context, *UpdatePriceRequestBook) (*UpdatePriceResponseBook, error)
	UpdateAmount(context.Context, *UpdateAmountRequestBook) (*UpdateAmountResponseBook, error)
	mustEmbedUnimplementedBookV1Server()
}

// UnimplementedBookV1Server must be embedded to have forward compatible implementations.
type UnimplementedBookV1Server struct {
}

func (UnimplementedBookV1Server) Create(context.Context, *CreateRequestBook) (*CreateResponseBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBookV1Server) Get(context.Context, *GetRequestBook) (*GetResponseBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBookV1Server) UpdatePrice(context.Context, *UpdatePriceRequestBook) (*UpdatePriceResponseBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrice not implemented")
}
func (UnimplementedBookV1Server) UpdateAmount(context.Context, *UpdateAmountRequestBook) (*UpdateAmountResponseBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAmount not implemented")
}
func (UnimplementedBookV1Server) mustEmbedUnimplementedBookV1Server() {}

// UnsafeBookV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookV1Server will
// result in compilation errors.
type UnsafeBookV1Server interface {
	mustEmbedUnimplementedBookV1Server()
}

func RegisterBookV1Server(s grpc.ServiceRegistrar, srv BookV1Server) {
	s.RegisterService(&BookV1_ServiceDesc, srv)
}

func _BookV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.book_store.v1.BookV1/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookV1Server).Create(ctx, req.(*CreateRequestBook))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.book_store.v1.BookV1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookV1Server).Get(ctx, req.(*GetRequestBook))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookV1_UpdatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriceRequestBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookV1Server).UpdatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.book_store.v1.BookV1/UpdatePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookV1Server).UpdatePrice(ctx, req.(*UpdatePriceRequestBook))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookV1_UpdateAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAmountRequestBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookV1Server).UpdateAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.book_store.v1.BookV1/UpdateAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookV1Server).UpdateAmount(ctx, req.(*UpdateAmountRequestBook))
	}
	return interceptor(ctx, in, info, handler)
}

// BookV1_ServiceDesc is the grpc.ServiceDesc for BookV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.book_store.v1.BookV1",
	HandlerType: (*BookV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BookV1_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BookV1_Get_Handler,
		},
		{
			MethodName: "UpdatePrice",
			Handler:    _BookV1_UpdatePrice_Handler,
		},
		{
			MethodName: "UpdateAmount",
			Handler:    _BookV1_UpdateAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
